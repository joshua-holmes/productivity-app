{"version":3,"sources":["components/SideNav.js","components/StocksCard.js","components/IncomeExpensesPieChart.js","components/IncomeExpenseAreaChart.js","components/DashboardCard.js","components/Dashboard.js","components/BudgetList.js","components/BudgetFormBody.js","components/Budget.js","components/InputSlider.js","components/RetResults.js","components/InputField.js","components/RetCalcForm.js","components/Retirement.js","components/ListItem.js","components/ProsCons.js","components/Stocks.js","App.js","reportWebVitals.js","index.js"],"names":["drawerWidth","SideNav","props","pages","id","name","icon","link","window","useState","mobileOpen","setMobileOpen","handleDrawerToggle","linkStyle","textDecoration","color","drawer","Toolbar","Divider","List","map","item","style","to","ListItem","button","ListItemIcon","ListItemText","primary","container","undefined","document","body","Box","sx","display","CssBaseline","AppBar","position","width","sm","ml","IconButton","edge","onClick","mr","Typography","variant","noWrap","component","flexShrink","Drawer","open","onClose","ModalProps","keepMounted","xs","boxSizing","flexGrow","p","children","StocksCard","change","obj","handleFave","favedState","faved","setFaved","changeTime","setTime","handleClick","e","target","value","priceChange1h","priceChange1d","priceChange1w","formatter","Intl","NumberFormat","currency","Grid","md","lg","Paper","elevation","px","py","Stack","alignItems","pb","direction","justifyContent","spacing","Avatar","alt","src","symbol","Rating","max","onChange","event","newValue","format","price","gutterBottom","Button","IncomeExpensesPieChart","budgetData","incomeOrExpenses","monthName","isAnimation","setIsAnimation","getPieLabel","data","category","formatAsDollar","amount","useEffect","setTimeout","COLORS","dataIsLoaded","pieData","returnedArray","categories","push","getMonthlyBudgetData","ResponsiveContainer","PieChart","height","Pie","dataKey","nameKey","cx","cy","innerRadius","outerRadius","paddingAngle","fill","label","isAnimationActive","entry","index","Cell","length","IncomeExpenseAreaChart","AreaChart","x1","y1","x2","y2","offset","stopColor","stopOpacity","XAxis","YAxis","CartesianGrid","strokeDasharray","Tooltip","Area","type","stroke","fillOpacity","DashboardCard","Dashboard","stockFaves","currentMonthYear","setBudgetData","yearMonth","setYearMonth","yearValue","parseInt","slice","monthValue","yearToFetch","renderedStockFaves","fetch","then","r","json","Input","margin","Container","month","income","total","expenses","getAllBudgetDataByMonth","BudgetList","handleRemove","createCategoryArray","inc","TableContainer","mb","Table","TableBody","TableRow","TableCell","align","parseFloat","BudgetFormBody","isError","formData","handleChange","handleSubmit","FormControl","error","FormHelperText","m","FormGroup","row","TextField","minWidth","InputLabelProps","shrink","Budget","formExpenseData","setFormExpenseData","formIncomeData","setFormIncomeData","setIsError","setFormData","form","Object","keys","newCategories","config","method","headers","JSON","stringify","monthlyData","returnedObject","netSum","sum","net","getTotals","mx","InputSlider","min","step","scale","mark","Slider","valueLabelDisplay","RetResults","result","initial","graphData","years","dollars","i","goalYear","rate","monthly","toFixed","left","InputField","message","symbolPosition","formInputSelected","setFormInputSelected","getAdornment","InputAdornment","InputLabel","htmlFor","startAdornment","endAdornment","onFocus","onBlur","RetCalcForm","indexOf","console","warn","onSubmit","autoComplete","Retirement","preventDefault","alert","ListItemContainer","secondaryAction","ProsCons","pros","setPros","cons","setCons","prosConsValue","setProsConsValue","textFieldValue","setTextFieldValue","setError","renderProsArray","renderConsArray","formReset","find","arrayItem","filteredCons","filter","filteredPros","inputProps","fontSize","minHeight","orientation","flexItem","Select","labelId","MenuItem","checkDupPro","thing","checkDupCon","Stocks","stocksData","renderStocks","theme","createTheme","palette","main","purple","secondary","App","setStockFaves","setStocksData","newDate","Date","currentMonthValue","getMonth","currentYearValue","getFullYear","response","catch","filteredFaves","res","text","coins","className","ThemeProvider","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.350549d0.chunk.js","sourcesContent":["import AppBar from \"@mui/material/AppBar\";\nimport Box from \"@mui/material/Box\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport Divider from \"@mui/material/Divider\";\nimport Drawer from \"@mui/material/Drawer\";\nimport IconButton from \"@mui/material/IconButton\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\n\nimport AppsIcon from \"@mui/icons-material/Apps\";\nimport AutoGraphIcon from \"@mui/icons-material/AutoGraph\";\nimport AttachMoneyIcon from \"@mui/icons-material/AttachMoney\";\nimport CompareIcon from \"@mui/icons-material/Compare\";\nimport ShowChartIcon from '@mui/icons-material/ShowChart';\n\nimport { Link } from \"react-router-dom\";\n\nimport { useState } from \"react\";\n\nconst drawerWidth = 240;\n\nfunction SideNav(props) {\n  const pages = [\n    { id: 1, name: \"Dashboard\", icon: <AppsIcon />, link: \"/\" },\n    { id: 2, name: \"Retirement\", icon: <AutoGraphIcon />, link: \"/retirement\" },\n    { id: 3, name: \"Budget\", icon: <AttachMoneyIcon />, link: \"/budget\" },\n    { id: 4, name: \"Pros & Cons\", icon: <CompareIcon />, link: \"/pros-cons\" }, \n    { id: 5, name: \"Stocks\", icon: <ShowChartIcon />, link: \"/stocks\" },\n  ];\n\n  const { window } = props;\n  const [mobileOpen, setMobileOpen] = useState(false);\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const linkStyle = {\n    textDecoration: \"none\",\n    color: \"inherit\",\n  };\n\n  const drawer = (\n    <div>\n      <Toolbar />\n      <Divider />\n      <List>\n        {pages.map((item) => (\n          <Link style={linkStyle} to={item.link} key={item.id}>\n            <ListItem button>\n              <ListItemIcon>{item.icon}</ListItemIcon>\n              <ListItemText primary={item.name} />\n            </ListItem>\n          </Link>\n        ))}\n      </List>\n    </div>\n  );\n\n  const container =\n    window !== undefined ? () => window().document.body : undefined;\n\n  return (\n    <Box sx={{ display: \"flex\" }}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        sx={{\n          width: { sm: `calc(100% - ${drawerWidth}px)` },\n          ml: { sm: `${drawerWidth}px` },\n        }}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            sx={{ mr: 2, display: { sm: \"none\" } }}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap component=\"div\">\n            Productivity App\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Box\n        component=\"nav\"\n        sx={{ width: { sm: drawerWidth }, flexShrink: { sm: 0 } }}\n        aria-label=\"mailbox folders\"\n      >\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Drawer\n          container={container}\n          variant=\"temporary\"\n          open={mobileOpen}\n          onClose={handleDrawerToggle}\n          ModalProps={{\n            keepMounted: true, // Better open performance on mobile.\n          }}\n          sx={{\n            display: { xs: \"block\", sm: \"none\" },\n            \"& .MuiDrawer-paper\": {\n              boxSizing: \"border-box\",\n              width: drawerWidth,\n            },\n          }}\n        >\n          {drawer}\n        </Drawer>\n        <Drawer\n          variant=\"permanent\"\n          sx={{\n            display: { xs: \"none\", sm: \"block\" },\n            \"& .MuiDrawer-paper\": {\n              boxSizing: \"border-box\",\n              width: drawerWidth,\n            },\n          }}\n          open\n        >\n          {drawer}\n        </Drawer>\n      </Box>\n      <Box\n        component=\"main\"\n        sx={{\n          flexGrow: 1,\n          p: 3,\n          width: { sm: `calc(100% - ${drawerWidth}px)` },\n        }}\n      >\n        <Toolbar />\n        {props.children}\n      </Box>\n    </Box>\n  );\n}\n\nexport default SideNav;\n","import { useState } from \"react\";\n\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport Paper from \"@mui/material/Paper\";\nimport Rating from \"@mui/material/Rating\";\nimport Avatar from \"@mui/material/Avatar\";\nimport Stack from \"@mui/material/Stack\";\nimport Button from \"@mui/material/Button\";\n\nfunction StocksCard({ obj, handleFave, favedState }) {\n  const [faved, setFaved] = useState(favedState);\n  const [changeTime, setTime] = useState(\"Hour\"); // use state for our hr/day/week buttons\n\n  function handleClick(e) {\n    setTime(e.target.value);\n  }\n\n  let change; // sets price displayed to correspond with state that button produces\n  if (changeTime === \"Hour\") {\n    change = obj.priceChange1h;\n  } else if (changeTime === \"Day\") {\n    change = obj.priceChange1d;\n  } else if (changeTime === \"Week\") {\n    change = obj.priceChange1w;\n  }\n\n  // formats dollar amounts\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n\n    // These options are needed to round to whole numbers if that's what you want.\n    //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n    //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n  });\n\n  return (\n    <Grid item xs={12} md={6} lg={4}>\n      <Paper elevation={3} sx={{ px: 2, py: 3 }}>\n        <Stack alignItems='center' sx={{ pb: 1 }} direction=\"row\" justifyContent=\"center\" spacing={4}>\n          <Avatar alt={obj.name} src={obj.icon} />\n          <Typography variant=\"h4\">{obj.symbol}</Typography>\n          <Rating\n            name=\"simple-controlled\"\n            max={1}\n            value={faved}\n            onChange={(event, newValue) => {\n              setFaved(newValue);\n              handleFave(obj, newValue);\n            }}\n          />\n        </Stack>\n\n        <Typography variant=\"h5\">{formatter.format(obj.price)}</Typography>\n        <Typography color={change < 0 ? \"red\" : \"green\"} gutterBottom>{change} %</Typography>\n        <Stack direction=\"row\" justifyContent=\"center\" spacing={1} >\n          <Button\n            variant={changeTime === \"Hour\" ? \"contained\" : \"outlined\"}\n            value=\"Hour\"\n            onClick={handleClick}\n          >\n            Hour\n          </Button>\n          <Button\n            variant={changeTime === \"Day\" ? \"contained\" : \"outlined\"}\n            value=\"Day\"\n            onClick={handleClick}\n          >\n            Day\n          </Button>\n          <Button\n            variant={changeTime === \"Week\" ? \"contained\" : \"outlined\"}\n            value=\"Week\"\n            onClick={handleClick}\n          >\n            Week\n          </Button>\n        </Stack>\n      </Paper>\n    </Grid>\n  );\n}\n\nexport default StocksCard;\n","import { ResponsiveContainer, PieChart, Pie, Cell } from \"recharts\";\nimport { useEffect, useState } from \"react\";\n\nfunction IncomeExpensesPieChart({ budgetData, incomeOrExpenses, monthName }) {\n\n    // To fix weird chart label issue\n    const [ isAnimation, setIsAnimation ] = useState(false)\n    useEffect(() => {\n        setTimeout(() => setIsAnimation(true), 250)\n    }, [])\n\n    function getMonthlyBudgetData(budgetData, monthName, incomeOrExpenses) {\n        const returnedArray = [];\n        const categories = budgetData[monthName][incomeOrExpenses].categories;\n        for ( let item in categories ) {\n            returnedArray.push({\n                category: item,\n                amount: categories[item]\n            })\n        }\n        return returnedArray;\n    }\n    function getPieLabel(data) {\n        return `${data.category} ${formatAsDollar(data.amount)}`\n    }\n    const formatAsDollar = Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n    }).format;\n    const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042']\n    const dataIsLoaded = !!budgetData;\n    const pieData = dataIsLoaded && getMonthlyBudgetData(budgetData, monthName, incomeOrExpenses);\n\n    const renderChart = () => {\n        return (\n            <ResponsiveContainer width=\"100%\">\n                <PieChart\n                    width={730}\n                    height={250}\n\n                >\n                    <Pie\n                        data={pieData}\n                        dataKey=\"amount\"\n                        nameKey=\"category\"\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        innerRadius={60}\n                        outerRadius={80}\n                        paddingAngle={5}\n                        fill=\"#8884d8\"\n                        label={getPieLabel}\n                        isAnimationActive={isAnimation}\n                    >\n                        {pieData.map((entry, index) => (\n                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                        ))}\n                    </Pie>\n                </PieChart>\n            </ResponsiveContainer>\n        )\n    }\n    const chart = dataIsLoaded ? renderChart() : null\n    return chart;\n}\n\nexport default IncomeExpensesPieChart;\n","import { ResponsiveContainer, AreaChart, XAxis, YAxis, CartesianGrid, Tooltip, Area } from \"recharts\";\n\nfunction IncomeExpenseAreaChart({ data }) {\n\n    return (\n        <ResponsiveContainer width=\"90%\" height={300}>\n        <AreaChart data={data}>\n            <defs>\n                <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8}/>\n                    <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0}/>\n                </linearGradient>\n                <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8}/>\n                    <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0}/>\n                </linearGradient>\n            </defs>\n            <XAxis dataKey=\"month\" />\n            <YAxis />\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <Tooltip />\n            <Area type=\"monotone\" dataKey=\"income\" stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#colorUv)\" />\n            <Area type=\"monotone\" dataKey=\"expenses\" stroke=\"#82ca9d\" fillOpacity={1} fill=\"url(#colorPv)\" />\n        </AreaChart></ResponsiveContainer>\n    )\n}\n\nexport default IncomeExpenseAreaChart;\n","import Paper from \"@mui/material/Paper\";\n\n\nfunction DashboardCard({children}){\nreturn (\n      <Paper elevation={3}>\n        {children}\n      </Paper>\n)\n}\n\nexport default DashboardCard","import Grid from \"@mui/material/Grid\";\nimport Input from \"@mui/material/Input\";\nimport StocksCard from \"./StocksCard\";\nimport IncomeExpensesPieChart from \"./IncomeExpensesPieChart\";\nimport { useEffect, useState } from \"react\";\nimport IncomeExpenseAreaChart from \"./IncomeExpenseAreaChart\";\nimport Container from \"@mui/material/Container\";\nimport { ResponsiveContainer } from \"recharts\";\n\nimport DashboardCard from \"./DashboardCard\";\nimport { Typography } from \"@mui/material\";\n\nfunction Dashboard({ stockFaves, handleFave, currentMonthYear }) {\n  const [budgetData, setBudgetData] = useState();\n\n  // Date state & helper variables based off that\n  const [yearMonth, setYearMonth] = useState(currentMonthYear);\n  const yearValue = parseInt(yearMonth.slice(0, 4));\n  const monthValue = parseInt(yearMonth.slice(-2));\n  const yearToFetch =\n    yearValue >= 2021 ? parseInt(yearMonth.slice(2, 4)) - 20 : null;\n  const monthNamelist = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  const monthName = monthNamelist[monthValue - 1];\n\n  const renderedStockFaves = stockFaves.map((obj) => (\n    <StocksCard key={obj.id} obj={obj} favedState={1} handleFave={handleFave} />\n  ));\n  useEffect(() => {\n    fetch(`http://localhost:3000/budget/${yearToFetch}`)\n      .then((r) => r.json())\n      .then((data) => setBudgetData(data.data));\n  }, [yearToFetch]);\n\n  function getAllBudgetDataByMonth(budgetData) {\n    const returnedArray = [];\n    for (let month in budgetData) {\n      returnedArray.push({\n        month: month,\n        income: budgetData[month].income.total,\n        expenses: budgetData[month].expenses.total,\n      });\n    }\n    return returnedArray;\n  }\n\n  return (\n    <>\n      <Input\n        type=\"month\"\n        value={yearMonth}\n        onChange={(e) => setYearMonth(e.target.value)}\n        style={{ margin: \"10px 0 30px 0\" }}\n      />\n\n      <Grid\n        sx={{ flexGrow: 1 }}\n        container\n        spacing={3}\n        justifyContent=\"space-evenly\"\n      >\n        {renderedStockFaves}\n\n        <Grid item xs={12} md={8} lg={6}>\n          <DashboardCard>\n            <Container sx={{ py: 3 }}>\n              <Typography gutterBottom variant=\"h5\">\n                {yearValue} Budget Analysis\n              </Typography>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <IncomeExpenseAreaChart\n                  data={budgetData && getAllBudgetDataByMonth(budgetData)}\n                />\n              </ResponsiveContainer>\n            </Container>\n          </DashboardCard>\n        </Grid>\n\n        <Grid item xs={12} md={8} lg={6}>\n          <DashboardCard>\n            <Container sx={{ py: 3 }}>\n              <Typography gutterBottom variant=\"h5\">\n                {monthName} Income Analysis\n              </Typography>  \n              <ResponsiveContainer width=\"100%\" height={300}>\n                  <IncomeExpensesPieChart\n                    budgetData={budgetData}\n                    monthName={monthName}\n                    incomeOrExpenses=\"income\"\n                  />\n              </ResponsiveContainer>\n              \n            </Container>\n          </DashboardCard>\n        </Grid>\n\n        <Grid item xs={12} md={8} lg={6}>\n          <DashboardCard>\n            <Container sx={{ py: 3 }}>\n              <Typography gutterBottom variant=\"h5\">\n                {monthName} Expense Analysis\n              </Typography>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <IncomeExpensesPieChart\n                  budgetData={budgetData}\n                  monthName={monthName}\n                  incomeOrExpenses=\"expenses\"\n                />\n              </ResponsiveContainer>\n            </Container>\n          </DashboardCard>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default Dashboard;\n","import TableCell from \"@mui/material/TableCell\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport IconButton from \"@mui/material/IconButton\";\nimport TableRow from \"@mui/material/TableRow\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\n\nfunction BudgetList({ incomeOrExpenses, handleRemove, budgetData, monthName }) {\n    function createCategoryArray(incomeOrExpenses) {\n        const returnedArray = [];\n        const categories = budgetData && budgetData[monthName][incomeOrExpenses].categories\n        for ( let item in categories ) {\n            returnedArray.push({ name: item, amount: categories[item] })\n        }\n        return returnedArray\n    }\n    return (\n        createCategoryArray(incomeOrExpenses).map((inc) => {\n            // an array of our income list items\n            return (\n                <TableContainer key={inc.name} sx={{ mb: 4, px: 1 }}>\n                    <Table>\n                        <TableBody>\n                            <TableRow>\n                                <TableCell align=\"left\" sx={{ width: \"33%\" }}>\n                                    {inc.name}\n                                </TableCell>\n                                <TableCell align=\"center\" sx={{ width: \"33%\" }}>\n                                    {inc.amount}\n                                </TableCell>\n                                <TableCell align=\"right\" sx={{ width: \"33%\" }}>\n                                    <IconButton onClick={() => handleRemove(inc.name, parseFloat(inc.amount), incomeOrExpenses)}>\n                                        <DeleteIcon />\n                                    </IconButton>\n                                </TableCell>\n                            </TableRow>\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            );\n        })\n    )\n}\n\nexport default BudgetList\n","import FormHelperText from \"@mui/material/FormHelperText\";\nimport FormControl from \"@mui/material/FormControl\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport TextField from \"@mui/material/TextField\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport Button from \"@mui/material/Button\";\n\nfunction BudgetFormBody({ isError, formData, handleChange, handleSubmit, incomeOrExpenses }) {\n\n    return (\n        <FormControl error={isError[incomeOrExpenses]} style={{ margin: \"0 0 50px 0\" }}>\n            <FormHelperText sx={{ m: 1 }} color=\"warning\">\n                Be sure to enter a unique name and an amount\n            </FormHelperText>\n\n            <FormGroup row>\n                <TextField\n                    sx={{ m: 1, minWidth: 120 }}\n                    id=\"outlined-basic\"\n                    label={`${incomeOrExpenses} name`}\n                    variant=\"outlined\"\n                    name=\"name\"\n                    onChange={e => handleChange(e, incomeOrExpenses)}\n                    value={formData.name || \"\"}\n                />\n                <TextField\n                    sx={{ m: 1, minWidth: 120 }}\n                    id=\"outlined-number\"\n                    label=\"Amount\"\n                    type=\"number\"\n                    name=\"amount\"\n                    InputLabelProps={{\n                            shrink: true,\n                    }}\n                    onChange={e => handleChange(e, incomeOrExpenses)}\n                    value={formData.amount || \"\"}\n                />\n                <Button\n                    onClick={() => handleSubmit(incomeOrExpenses)}\n                    sx={{ m: 1 }}\n                    variant=\"contained\"\n                >\n                    <AddIcon />\n                </Button>\n            </FormGroup>\n        </FormControl>\n    )\n}\n\nexport default BudgetFormBody;\n","import { useState } from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport Grid from \"@mui/material/Grid\";\nimport Input from \"@mui/material/Input\";\nimport { useEffect } from \"react\";\nimport BudgetList from \"./BudgetList\";\nimport BudgetFormBody from \"./BudgetFormBody\";\n\nfunction Budget({ currentMonthYear }) {\n    // Data from server\n    const [budgetData, setBudgetData] = useState()\n\n    //Data from forms\n    const [formExpenseData, setFormExpenseData] = useState({})\n    const [formIncomeData, setFormIncomeData] = useState({})\n\n    // error handling\n    const [isError, setIsError] = useState({ income: false, expenses: false });\n\n    // Date state & helper variables based off that\n    const [yearMonth, setYearMonth] = useState(currentMonthYear);\n    const yearValue = parseInt(yearMonth.slice(0, 4))\n    const monthValue = parseInt(yearMonth.slice(-2))\n    const yearToFetch = ( yearValue >= 2021 ? parseInt(yearMonth.slice(2, 4)) - 20 : null )\n    const monthNamelist = [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ]\n    const monthName = monthNamelist[monthValue - 1];\n\n    // For currency formatting\n    let formatAsDollar = Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n    }).format;\n\n    // Fetch\n    useEffect(() => {\n        fetch(`http://localhost:3000/budget/${yearToFetch}`)\n        .then(r => r.json())\n        .then(data => {\n            setBudgetData(data.data)\n        })\n    }, [yearToFetch])\n\n    // Handle functions\n    function handleChange(e, incomeOrExpenses) {\n        let setFormData;\n        let formData;\n        if (incomeOrExpenses === \"income\") {\n            setFormData = setFormIncomeData\n            formData = formIncomeData\n        } else {\n            setFormData = setFormExpenseData\n            formData = formExpenseData\n        }\n        // sets income name field state when user types\n        setIsError(() => {\n            return {\n                ...isError,\n                [incomeOrExpenses]: false\n            }\n        });\n        setFormData(() => {\n            return {\n                ...formData,\n                [e.target.name]: e.target.value\n            }\n        });\n    }\n    function handleSubmit(incomeOrExpenses) {\n        const form = ( incomeOrExpenses === \"income\" ? formIncomeData : formExpenseData )\n        if ( Object.keys(form).length === 2 ) {\n            const newCategories = {\n                ...budgetData[monthName][incomeOrExpenses].categories,\n                [form.name]: parseFloat(form.amount)\n            }\n            const body = {\n                data: {\n                    ...budgetData,\n                }\n            }\n            body.data[monthName][incomeOrExpenses].categories = newCategories\n            body.data[monthName][incomeOrExpenses].total += parseFloat(form.amount)\n            const config = {\n                method: \"PATCH\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Accept\": \"application/json\"\n                },\n                body: JSON.stringify(body),\n            }\n            fetch(`http://localhost:3000/budget/${yearToFetch}`, config)\n            .then(r => r.json())\n            .then(data => {\n                setBudgetData(data.data)\n                setFormIncomeData({})\n                setFormExpenseData({})\n            })\n        } else {\n            setIsError({\n                ...isError,\n                [incomeOrExpenses]: true\n            })\n        }\n    }\n    function handleRemove(name, amount, incomeOrExpenses) {\n        // gives functionality to the trash icon button\n        const categories = budgetData[monthName][incomeOrExpenses].categories;\n        const newCategories = {}\n        for ( let item in categories ) {\n            if ( name !== item ) {\n                newCategories[item] = categories[item];\n            }\n        }\n        const body = {\n            data: {\n                ...budgetData,\n            }\n        }\n        body.data[monthName][incomeOrExpenses].categories = newCategories\n        body.data[monthName][incomeOrExpenses].total -= amount\n        const config = {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            body: JSON.stringify(body),\n        }\n        fetch(`http://localhost:3000/budget/${yearToFetch}`, config)\n        .then(r => r.json())\n        .then(data => setBudgetData(data.data))\n    }\n\n    // Get totals for month\n    function getTotals(monthlyData) {\n        const returnedObject = {}\n        let netSum = 0;\n        for ( let incomeOrExpenses in monthlyData ) {\n            const categories = monthlyData[incomeOrExpenses].categories;\n            let sum = 0;\n            for ( let item in categories ) {\n                sum += categories[item];\n            }\n            returnedObject[incomeOrExpenses] = sum;\n            netSum += ( incomeOrExpenses === \"income\" ? sum : - sum );\n        }\n        returnedObject.net = netSum;\n        return returnedObject;\n    }\n\n    const total = budgetData ? getTotals(budgetData[monthName]) : {}\n\n    return (\n        <Grid sx={{ mx: 4 }}>\n            <Typography variant=\"h2\">Simple Budget</Typography>\n            <Input\n                type=\"month\"\n                value={yearMonth}\n                onChange={e => setYearMonth(e.target.value)}\n                style={{ margin: \"10px 0 30px 0\" }}\n            /><br/>\n\n            <Typography variant=\"h4\" gutterBottom>\n                Income\n            </Typography>\n            <BudgetList\n                incomeOrExpenses=\"income\"\n                handleRemove={handleRemove}\n                budgetData={budgetData}\n                monthName={monthName}\n            />\n            <BudgetFormBody\n                incomeOrExpenses=\"income\"\n                isError={isError}\n                formData={formIncomeData}\n                handleChange={handleChange}\n                handleSubmit={handleSubmit}\n            />\n\n            <Typography variant=\"h4\" gutterBottom>\n                Expenses\n            </Typography>\n            <BudgetList\n                incomeOrExpenses=\"expenses\"\n                handleRemove={handleRemove}\n                budgetData={budgetData}\n                monthName={monthName}\n            />\n            <BudgetFormBody\n                incomeOrExpenses=\"expenses\"\n                isError={isError}\n                formData={formExpenseData}\n                handleChange={handleChange}\n                handleSubmit={handleSubmit}\n            />\n\n            <Typography variant=\"h4\" gutterBottom>Totals</Typography>\n            <Typography variant=\"h5\">\n                Income: {budgetData ? formatAsDollar(total.income) : \"loading...\"}\n            </Typography>\n            <Typography variant=\"h5\">\n                Expenses: {budgetData ? formatAsDollar(total.expenses) : \"loading...\"}\n            </Typography>\n            <Typography\n                style={{ color: total.net < 0 ? \"red\" : \"green\" }}\n                variant=\"h5\"\n            >\n                Net: {budgetData ? formatAsDollar(total.net) : \"loading...\"}\n            </Typography>\n\n        </Grid>\n            );\n        }\n\nexport default Budget;\n","import Slider from '@mui/material/Slider';\nimport Grid from '@mui/material/Grid';\n\nfunction InputSlider({ label, name, handleChange, formData, max, min, step, scale, mark }) {\n\n    // function calculateValues(max, scale) {\n    //     const values = [];\n    //     if ( scale === \"incremental\" ) {\n    //         values.push((max - min) + ((max - min) / 5))\n    //         values.push(value => {\n    //             if ( value < 100 ) {\n    //                 return value;\n    //             } else {\n    //                 return value * 5;\n    //             }\n    //         })\n    //     }\n    //     return values;\n    // }\n\n    // const [ adjustedMax, calculateScale ] = calculateValues(max, scale)\n\n    return (\n        <Grid item xs={12} sm={6} md={3}>\n            <Slider\n                valueLabelDisplay=\"auto\"\n                onChange={handleChange}\n                name={name}\n                value={formData[name]}\n                max={max}\n                min={min}\n                step={step}\n            />\n            <label>{label}</label>\n\n        </Grid>\n    )\n}\n\nexport default InputSlider;\n","import Box from '@mui/material/Box';\nimport Typography from \"@mui/material/Typography\";\nimport Grid from '@mui/material/Grid';\nimport InputSlider from \"./InputSlider\";\nimport Container from '@mui/material/Container';\n\nimport { ResponsiveContainer, AreaChart, Area, CartesianGrid, XAxis, YAxis, Tooltip } from 'recharts';\n\nlet formatAsDollar = Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n}).format;\n\nfunction RetResults({ formData, setFormData }) {\n\n    let result = formData.initial || 0;\n    const graphData = [{\n        years: 0,\n        dollars: result,\n    }];\n    for ( let i = 0; i < (formData.goalYear * 12); i++ ) {\n        result *= 1 + formData.rate/12\n        result += formData.monthly || 0\n        if ( (i + 1) % 12 === 0 ) {\n            graphData.push({\n                years: (i + 1) / 12,\n                dollars: parseFloat(result.toFixed(2)),\n            })\n        }\n    }\n    function handleChange(e) {\n        setFormData({\n            ...formData,\n            [e.target.name]: e.target.value,\n        })\n    }\n\n    return (\n        <Box sx={{ mx: 'auto' }}>\n\n            <Container sx={{ mb: 4 }}>\n                <ResponsiveContainer  width=\"90%\" height={300}>\n                    <AreaChart margin={{ left: 20 }} data={graphData}>\n                        <Area type=\"monotone\" dataKey=\"dollars\" stroke=\"#6a1b9a\"  fill=\"#6a1b9a\" />\n                        <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n                        <XAxis dataKey=\"years\" />\n                        <YAxis />\n                        <Tooltip />\n                    </AreaChart>\n                </ResponsiveContainer>\n            </Container>\n\n            <Grid container spacing={8} sx={{ mb: 4 }}>\n                <InputSlider\n                    label=\"Monthly contribution\"\n                    name=\"monthly\"\n                    formData={formData}\n                    handleChange={handleChange}\n                    max={1000}\n                    step={10}\n                />\n                <InputSlider\n                    label=\"Initial amount\"\n                    name=\"initial\"\n                    formData={formData}\n                    handleChange={handleChange}\n                    max={100000}\n                    step={1000}\n                />\n                <InputSlider\n                    label=\"Years until retirement\"\n                    name=\"goalYear\"\n                    formData={formData}\n                    handleChange={handleChange}\n                />\n                <InputSlider\n                    label=\"Rate\"\n                    name=\"rate\"\n                    formData={formData}\n                    handleChange={handleChange}\n                    max={0.08}\n                    min={0.05}\n                    step={0.005}\n                />\n            </Grid>\n\n\n\n            <Typography variant=\"h5\" sx={{ mb: 3 }}>{formatAsDollar(result)}</Typography>\n\n        </Box>\n    )\n}\n\nexport default RetResults;\n","import FormControl from \"@mui/material/FormControl\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport Input from \"@mui/material/Input\"\nimport InputAdornment from '@mui/material/InputAdornment';\nimport { useState } from \"react\";\nimport Grid from '@mui/material/Grid';\n\nfunction InputField({ name, message, onChange, formData, symbol, symbolPosition, type }) {\n    const [ formInputSelected, setFormInputSelected ] = useState()\n\n    function getAdornment(position) {\n        if ( (formInputSelected && symbol) || formData[name] ) {\n            return <InputAdornment position={position}>{symbol}</InputAdornment>;\n        } else {\n            return null;\n        }\n    }\n    const formControlStyles = {\n        display: \"block\",\n    }\n    const inputStyles = {\n        width: \"100%\",\n    }\n    return (\n        <>\n            <Grid item xs={0} md={4} />\n            <Grid item xs={12} md={4}>\n                <FormControl style={formControlStyles} sx={{ m: 1 }} variant=\"standard\">\n                    <InputLabel htmlFor={name}>\n                        {message}\n                    </InputLabel>\n                    <Input\n                        id={name}\n                        label={message}\n                        name={name}\n                        variant=\"outlined\"\n                        startAdornment={symbolPosition === \"end\" ? null : getAdornment(\"start\")}\n                        endAdornment={symbolPosition === \"end\" ? getAdornment(\"end\") : null}\n                        onFocus={() => setFormInputSelected(true)}\n                        onBlur={() => setFormInputSelected(false)}\n                        style={inputStyles}\n                        onChange={onChange}\n                        value={formData[name] || \"\"}\n                        type={type}\n                    />\n                </FormControl>\n            </Grid>\n            <Grid item xs={0} md={4} />\n        </>\n    )\n}\n\nexport default InputField;\n","import Box from '@mui/material/Box';\nimport InputField from \"./InputField\";\nimport Grid from '@mui/material/Grid';\nimport Button from \"@mui/material/Button\";\n\nfunction RetCalcForm({ formData, setFormData, handleSubmit }) {\n    function handleChange(e) {\n        let value = 0.0;\n        const integerFields = [ \"goalYear\" ]\n        if ( e.target.value >= 0  ) {\n            if ( integerFields.indexOf(e.target.name) >= 0 ) {\n                value = parseFloat(e.target.value);\n            } else {\n                value = parseFloat(parseFloat(e.target.value).toFixed(2));\n            }\n            setFormData({\n                ...formData,\n                [e.target.name]: value,\n            })\n        } else {\n            console.warn(\"Negative numbers cannot be entered.\");\n        }\n    }\n    return (\n        <Box component=\"form\" onSubmit={handleSubmit} autoComplete=\"off\">\n            <Grid container spacing={2}>\n                <InputField\n                    name=\"monthly\"\n                    message=\"Enter monthly contribution\"\n                    symbol=\"$\"\n                    onChange={handleChange}\n                    formData={formData}\n                    type=\"number\"\n                />\n                <InputField\n                    name=\"initial\"\n                    message=\"Enter starting amount\"\n                    symbol=\"$\"\n                    onChange={handleChange}\n                    formData={formData}\n                    type=\"number\"\n                />\n                <InputField\n                    name=\"goalYear\"\n                    message=\"Enter years until retirement\"\n                    symbol=\"years\"\n                    symbolPosition=\"end\"\n                    onChange={handleChange}\n                    formData={formData}\n                    type=\"number\"\n                />\n                <Grid item xs={12} sx={{ mb: 3 }}>\n                    <Button type=\"submit\">Submit</Button>\n                </Grid>\n            </Grid>\n        </Box>\n    )\n}\n\nexport default RetCalcForm\n","import { useState } from \"react\";\nimport RetResults from \"./RetResults\";\nimport RetCalcForm from \"./RetCalcForm\";\n\nimport Typography from \"@mui/material/Typography\";\n\n\nfunction Retirement() {\n    const [ formData, setFormData ] = useState({ rate: 0.06, monthly: 0, initial: 0, goalYear: 0 });\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        if ( formData.goalYear && (formData.monthly || formData.initial) ) {\n\n        } else {\n            // ERROR\n            alert(\"Years must be entered, and one of the amount fields must be entered.\")\n        }\n    }\n\n\n    return (\n        <>\n            <Typography variant=\"h2\">Retirement Calculator</Typography>\n            <main>\n                <RetCalcForm\n                    handleSubmit={handleSubmit}\n                    setFormData={setFormData}\n                    formData={formData}\n                />\n                <RetResults formData={formData} setFormData={setFormData} />\n\n            </main>\n        </>\n    )\n}\n\nexport default Retirement;\n","import ListItem from '@mui/material/ListItem';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport IconButton from '@mui/material/IconButton';\n\n\n\n\n\nfunction ListItemContainer( { data, handleRemove } ){\n    return (\n        <ListItem\n        secondaryAction={\n          <IconButton onClick={() => handleRemove(data)} edge=\"end\" aria-label=\"delete\">\n            <DeleteIcon  />\n          </IconButton>\n        }>\n            {data}\n        </ListItem>\n        \n    )\n}\n\nexport default ListItemContainer","import { useState } from \"react\";\n\nimport Grid from \"@mui/material/Grid\";\nimport Divider from \"@mui/material/Divider\";\nimport ListItemContainer from \"./ListItem\";\nimport List from \"@mui/material/List\";\nimport TextField from \"@mui/material/TextField\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport FormControl from \"@mui/material/FormControl\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport FormHelperText from \"@mui/material/FormHelperText\";\n\nfunction ProsCons() {\n  const [pros, setPros] = useState([]); // stores pros values\n  const [cons, setCons] = useState([]); // stores cons values\n\n  const [prosConsValue, setProsConsValue] = useState(\"\"); // controlled form entry\n  const [textFieldValue, setTextFieldValue] = useState(\"\"); // controlled form entry\n\n  const [error, setError] = useState(false); // error handling\n\n  const renderProsArray = pros.map((item) => {\n    // render an array of pros listitemcontainers\n    return (\n      <ListItemContainer\n        key={pros.indexOf(item)}\n        data={item}\n        handleRemove={handleRemove}\n      />\n    );\n  });\n\n  const renderConsArray = cons.map((item) => {\n    // render an array of cons listitemcontainers\n    return (\n      <ListItemContainer\n        key={cons.indexOf(item)}\n        data={item}\n        handleRemove={handleRemove}\n      />\n    );\n  });\n\n  function handleChangeSelect(e) {\n    // update state when changed\n    setProsConsValue(e.target.value);\n    setError(false);\n  }\n\n  function handleChangeText(e) {\n    // update state when changed\n    setTextFieldValue(e.target.value);\n    setError(false);\n  }\n\n  function formReset() {\n    // resets states of form\n    setProsConsValue(\"\");\n    setTextFieldValue(\"\");\n  }\n\n  function handleSubmit(e) {\n    // handle the submit\n    e.preventDefault();\n    const checkDupPro = pros.find((thing) => thing === textFieldValue); // check for duplicates\n    const checkDupCon = cons.find((thing) => thing === textFieldValue);\n\n    if (\n      // only continue if these are true. checks for duplicates and that our form is filled out\n      textFieldValue !== \"\" &&\n      prosConsValue !== \"\" &&\n      checkDupPro === undefined &&\n      checkDupCon === undefined\n    ) {\n      if (prosConsValue === \"Pro\") {\n        setPros([...pros, textFieldValue]);\n        formReset();\n      } else if (prosConsValue === \"Con\") {\n        setCons([...cons, textFieldValue]);\n        formReset();\n      }\n    } else {\n      setError(true);\n    }\n  }\n\n  function handleRemove(item) {\n    const foundInPros = pros.find((arrayItem) => item === arrayItem); // searches for our name\n    if (foundInPros === undefined) {\n      // if it isnt in the pros array, remove it from cons array\n      const filteredCons = cons.filter((arrayItem) => item !== arrayItem);\n      setCons(filteredCons);\n    } else {\n      const filteredPros = pros.filter((arrayItem) => item !== arrayItem);\n      setPros(filteredPros);\n    }\n  }\n\n  return (\n    <Grid sx={{ mx: 4 }}>\n      <Typography variant=\"h2\">Pros and Cons List</Typography>\n      <TextField\n        id=\"standard-basic\"\n        label=\"List name\"\n        variant=\"standard\"\n        sx={{ mb: 4 }}\n        inputProps={{\n          style: { fontSize: 30 },\n        }}\n      />\n\n      <Grid container sx={{ minHeight: 400, mb: 5 }}>\n        <Grid item xs>\n          <Typography variant=\"h4\" gutterBottom component=\"div\">\n            Pros\n          </Typography>\n          <List>{renderProsArray}</List>\n        </Grid>\n        <Divider orientation=\"vertical\" flexItem />\n        <Grid item xs>\n          <Typography variant=\"h4\" gutterBottom component=\"div\">\n            Cons\n          </Typography>\n          <List>{renderConsArray}</List>\n        </Grid>\n      </Grid>\n\n      <FormControl error={error}>\n        <FormHelperText sx={{ m: 1 }} color=\"warning\">\n          Be sure to enter a unique name and a type\n        </FormHelperText>\n        <FormGroup row>\n          <TextField\n            sx={{ m: 1, minWidth: 120 }}\n            id=\"outlined-basic\"\n            label=\"New list item name\"\n            variant=\"outlined\"\n            onChange={handleChangeText}\n            value={textFieldValue}\n          />\n          <FormControl sx={{ m: 1, minWidth: 120 }}>\n            <InputLabel id=\"demo-simple-select-helper-label\">\n              Pro or Con\n            </InputLabel>\n            <Select\n              labelId=\"demo-simple-select-helper-label\"\n              id=\"demo-simple-select-helper\"\n              value={prosConsValue}\n              label=\"ProsCons\"\n              onChange={handleChangeSelect}\n            >\n              <MenuItem value=\"Pro\">Pro</MenuItem>\n              <MenuItem value=\"Con\">Con</MenuItem>\n            </Select>\n          </FormControl>\n          <Button onClick={handleSubmit} sx={{ m: 1 }} variant=\"contained\">\n            Submit\n          </Button>\n        </FormGroup>\n      </FormControl>\n    </Grid>\n  );\n}\n\nexport default ProsCons;\n","import StocksCard from \"./StocksCard\";\n\nimport Grid from \"@mui/material/Grid\";\n\nfunction Stocks({ stocksData, stockFaves, handleFave }) {\n  const renderStocks = stocksData.map((obj) => {\n    return (\n      <StocksCard\n        key={obj.id}\n        obj={obj}\n        handleFave={handleFave}\n        favedState={\n          stockFaves.find((item) => item.id === obj.id) === undefined ? 0 : 1\n        }\n      />\n      // if our stock is favorited, render its default as such\n    );\n  });\n\n  return (\n    <Grid\n      justifyContent=\"space-evenly\"\n      sx={{ flexGrow: 1 }}\n      container\n      spacing={3}\n    >\n      {renderStocks}\n    </Grid>\n  );\n}\n\nexport default Stocks;\n","import \"./App.css\";\nimport { Route, Routes, BrowserRouter } from \"react-router-dom\";\nimport SideNav from \"./components/SideNav\";\nimport { useEffect, useState } from \"react\";\n\nimport Dashboard from \"./components/Dashboard\";\nimport Budget from \"./components/Budget\";\nimport Retirement from \"./components/Retirement\";\nimport ProsCons from \"./components/ProsCons\";\nimport Stocks from \"./components/Stocks\";\n\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport { purple } from \"@mui/material/colors\";\n\n// theme capabilites\n// reference https://mui.com/customization/color/#main-content\n// reference https://mui.com/customization/theming/#theme-provider\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: purple[800],\n    },\n    secondary: {\n      main: purple[100],\n    },\n  },\n});\n\nfunction App() {\n  const [stockFaves, setStockFaves] = useState([]);\n  const [stocksData, setStocksData] = useState([]);\n\n  // Current date\n  const newDate = new Date();\n  const currentMonthValue = newDate.getMonth() + 1;\n  const currentYearValue = newDate.getFullYear();\n  const currentMonthYear = `${currentYearValue}-${currentMonthValue}`\n\n  useEffect(() => {\n    // initial fetch for favorites only\n    fetch(\"http://localhost:3000/favStocks\")\n      .then((response) => response.json())\n      .then((data) => {\n        setStockFaves(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    // initial fetch for all stocks\n    fetch(\"https://api.coinstats.app/public/v1/coins?skip=0&limit=10\")\n      .then((response) => response.json())\n      .then((obj) => {\n        setStocksData(obj.coins);\n      });\n  }, []);\n\n  function handleFave(obj, newValue) {\n\n    if (newValue === 1) { // do if favorited\n      fetch('http://localhost:3000/favStocks', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(obj),\n      })\n      .then(response => response.json())\n      .then(data => {\n        setStockFaves([...stockFaves, data]); // front end\n      })\n      .catch((error) => {\n        console.error('Error:', error);\n      });\n    } else {\n      const filteredFaves = stockFaves.filter((item) => item.id !== obj.id);\n      // setStockFaves(filteredFaves); // front end\n      fetch(\"http://localhost:3000/favStocks/\" + obj.id, {\n        // back end\n        method: \"DELETE\",\n      })\n        .then((res) => res.text())\n        .then(() => {setStockFaves(filteredFaves)}) // front end\n        .catch((error) => {\n          console.error('Error:', error);\n        });\n    }\n  }\n\n  return (\n    <div className=\"App\">\n        <BrowserRouter>\n            <ThemeProvider theme={theme}>\n                <SideNav>\n                    <Routes>\n                        <Route\n                            path=\"/\"\n                            element={\n                                <Dashboard stockFaves={stockFaves} handleFave={handleFave} currentMonthYear={currentMonthYear} />\n                            }\n                        />\n                        <Route path=\"/budget\" element={<Budget currentMonthYear={currentMonthYear} />} />\n                        <Route path=\"/retirement\" element={<Retirement />} />\n                        <Route path=\"/pros-cons\" element={<ProsCons />} />\n                        <Route\n                            path=\"/stocks\"\n                            element={\n                                <Stocks stockFaves={stockFaves} stocksData={stocksData} handleFave={handleFave} />\n                            }\n                        />\n                    </Routes>\n                </SideNav>\n            </ThemeProvider>\n        </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}